/*
This Jenkinsfile is designed as the NV Standard Jenkins pipeline for CI, it
should work with customized Dockerfiles. Our Devops personal may copy it to
your project with minimal modification, including this statement. Make sure
you fully understand the design before you change it.
*/

pipeline {
    agent any

    environment {
        /* you may customize these environment variables */
        ORGANIZATION = "NV-Cedar"
        PROJECT_NAME = "cedar"
        SLACK_CHANNEL = "#cedar-jenkins"
        DOCKER_REGISTRY= "dtr.artifacts.pwc.com/pwcusnv"
        COMMIT7 = "${env.GIT_COMMIT.take(7)}"
        GIT_REPO = "${env.GIT_URL.tokenize('/')[3].split("\\.")[0]}"
    }

    options {
        /* ConcurrentBuild would slow down Jenkins and not reuse docker layer, to better collaborate teams together we need to limit Jenkins resource usage.*/
        disableConcurrentBuilds()
    }

    stages {
        stage('Prepare') {
            steps {
                echo sh(returnStdout: true, script: 'env')
                /* These steps are only for preparing frontend chrome image*/
                /* sh "docker pull ${DOCKER_REGISTRY}/techops/node/node-chrome:latest" */
                /* sh "docker tag ${DOCKER_REGISTRY}/techops/node/node-chrome:latest node-chrome" */
            }
        }
        stage("Build"){
            steps {
                script{
                    echo "Your COMMIT = latest ; COMMIT7 = ${COMMIT7}"
                    /* Use --target ci if one Dockerfile, or use -f ci/Dockerfile if two Dockerfiles */
                    sh "docker build -t ${PROJECT_NAME}/${GIT_REPO}:ci --target ci -f Dockerfile.cloudrun ."
                    sh "docker build -t ${PROJECT_NAME}/${GIT_REPO}:${COMMIT7} . -f Dockerfile.cloudrun"
                    /* sh "docker build -t ${PROJECT_NAME}/${GIT_REPO}:ci -f ci/Dockerfile ." */
                }
            }
        }
        /* stage("ci"){ */
        /*     steps { */
        /*         sh "docker run ${PROJECT_NAME}/${GIT_REPO}:ci yarn run ci" */
        /*     } */
        /* } */
        stage("Tag && Push"){
            steps {
                withCredentials([[$class: "UsernamePasswordMultiBinding", credentialsId: "643ea364-b0ca-4140-a4ef-1a525401724b", usernameVariable: "JFROG_USER", passwordVariable: "JFROG_PASSWORD"]]) {
                    sh "docker login --username ${JFROG_USER} --password ${JFROG_PASSWORD} dtr.artifacts.pwc.com"
                        sh "docker tag ${PROJECT_NAME}/${GIT_REPO}:${COMMIT7} ${DOCKER_REGISTRY}/${PROJECT_NAME}/${GIT_REPO}:${COMMIT7}"
                        sh "docker tag ${PROJECT_NAME}/${GIT_REPO}:${COMMIT7} ${DOCKER_REGISTRY}/${PROJECT_NAME}/${GIT_REPO}:latest"
                        sh "docker push ${DOCKER_REGISTRY}/${PROJECT_NAME}/${GIT_REPO}:${COMMIT7}"
                        sh "docker push ${DOCKER_REGISTRY}/${PROJECT_NAME}/${GIT_REPO}:latest"
                }
            }
        }
    }
    post {
        failure {
            echo "Sending FAILURE message to Slack"
            slackSend (color: '#FF9FA1',
            channel: "${env.SLACK_CHANNEL}",
            message: "CI Failed: ${PROJECT_NAME}/${GIT_REPO}\n${env.BUILD_URL}")
        }
    }
}

